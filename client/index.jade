doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui')
		title Hands-on Web Audio

		link(rel='stylesheet', type='text/css', href='css/style.css')
		
		script(src='js/bundle.js', defer)
		
	body
		div#renderer
		div.slides
			section(data-offset-y=1500)
				pre
					code.
						ALL SYSTEMS READY
				
			section(data-transition-duration=30)
				h1 Hands-On Web Audio
				h2 Soledad Penades
				p @supersole
				img(src='data/img/placeholder.png', data-replace='intro')

			section
				h1 Web Audio is like a tiny new language
				h2 small vocabulary
				h2 few grammar rules
				h2 and a couple of idioms

			// Web Audio is a completely different beast
			// Like speaking a new language
			// You need to master the idioms to properly speak a language
			// Once you understand these techniques you can pave your own way in Web Audio land

			section
				h1 AudioContext
				h2 where we start
				h2 where everything happens

			section
				pre
					code.
						var ac = new AudioContext();

			section
				h1 AudioContext
				h2 As a toolbox
				p "instance factory"

			section
				pre
					code.
						var oscillator = ac.createOscillator();
						var gain = ac.createGain();
						// etc...

			section
				h1 Nodes taxonomy
				img(src='data/img/placeholder.png', data-replace='nodes-taxonomy')

			section
				h1 AudioContext
				h2 As audio graph container

			section
				p introducing the most important method in nodes

			section
				pre
					code.
						connect()

			section
				h1 Modular routing
			
			section
				h2 Simplest graph
				pre
					code.
						var oscillator = ac.createOscillator();
						oscillator.connect(ac.destination);

			section
				h2 Simplest graph
				img(src='data/img/placeholder.png', data-replace='audio-graph-simple')

			section
				h2 Not so simple graph
				pre
					code.
						var osc1 = ac.createOscillator();
						osc1.connect(ac.destination);
						var osc2 = ac.createOscillator();
						osc2.connect(ac.destination);
						var osc3 = ac.createOscillator();
						osc3.connect(ac.destination);
						// ...

			section
				h2 Not so simple graph
				img(src='data/img/placeholder.png', data-replace='audio-graph-triple')

			section
				h2 More complex graph
				pre
					code.
						var gain = ac.createGain();
						var osc1 = ac.createOscillator();
						var filter1 = ac.createBiquadFilter();
						osc1.connect(filter1);
						filter1.connect(gain);
						var osc2 = ac.createOscillator();
						var filter2 = ac.createBiquadFilter();
						osc2.connect(filter2);
						filter2.connect(gain);
						// ...
						gain.connect(ac.destination);

	
			section
				h2 More complex graph
				img(src='data/img/modular-routing.png', data-replace='audio-graph')

			// It's cool to assemble these but there's another cool thing to talk about...

			section
				h1 Sound modulation
	
			section
				p or...
				
			section
				h1 audio as input data

			section
				p instead of connecting node to node,

			section
				h2 connect() node to node properties
				p adds node output to node param

			// so then property values are not stable/fixed but can fluctuate

			// sound sources such as oscillators
			section
				p but sound sources only output [-1, 1]

			section
				h2 a [-1, 1] fluctuation
				p is barely audible in most contexts!

			section
				h2 solution:
				h1 Gain nodes
				p multiply input by gain value

			section
				pre
					code.
						var gain = ac.createGain();
			
			section
				pre
					code.
						var osc = ac.createOscillator();
						var gain = ac.createGain();
						osc.connect(gain);
						gain.connect(ac.destination);
						gain.gain.value = 100;
						// osc out [-100, 100] now

			section
				pre
					code.
						window.addEventListener('mousemove', function(e) {
							var v = e.clientY / window.innerHeight;
						    gain.gain.setValueAtTime(v, ac.currentTime);
						});

			section
				p gain value as f(mouseY)
				img(src='data/img/placeholder.png', data-replace='gain')
	
			section
				pre
					code.
						var lfOsc = ac.createOscillator();
						var lfGain = ac.createGain();
						lfOsc.connect(lfGain);
						lfGain.gain.setValueAtTime(10, now);
						// lfGain outputs [-10, 10]
						var osc = ac.createOscillator();
						lfGain.connect(osc.frequency);
						osc.frequency.setValueAtTime(100, now);
						// osc oscillates at [90, 110]

			section
				h1 Modulation
				img(src='data/img/placeholder.png', data-replace='modulation')

			section
				h1 Corollary
				p You can build rich and complex graphs...
				h2 + adding node outputs to param inputs
				h2 * multiplying outputs with Gain nodes

			section
				h1 Performance

			section
				h2 the Web Audio promise:
				h1 Low latency +
				h1 Sample accurate playback
				p but how?

			section
				h1 Web Audio has its own thread

			section
				h2 Web Audio 'just'
				h1 processes scheduled events

			// nodes not only help build the node graph
			section
				h1 schedule events via node instances

			section
				p events = (mostly) value changes
				pre
					code.
						osc.start(2.0);
						osc.frequency.setValueAtTime(440, 3.5);
						osc.frequency.linearRampToValueAtTime(880, 13.5);
						gain.gain.exponentialRampToValueAtTime(0, 13.5);

			section
				h1 the graph is super optimised

			section
				h1 creating and throwing nodes away is cheap

			section
				h1 keeping track of state is expensive

			// don't keep references... once done with them
			section
				h2 don't keep references to nodes
				p (to avoid memory leaks)

			section
				h2 stop and disconnect sound sources
				p (so they're disposed of)

			// We've had a glimpse of W.a. functionalities, let's have a look
			// at what else can we do...
			section
				h1 What else can we do?

			// Oscillators aren't the only way to generate sound, buffer sources let you play samples
			// AKA 'pre-recorded' or digitalised data
			section
				h1 BufferSource
				h2 Playing sound samples

			section
				h1 BufferSource
				h2 Three steps process:
				// XHR/inline
				p Load binary sample data
				// anything the browser can play W.A. can play
				p Decode
				// As many times as you want!
				p Use it!

			section
				h1 BufferSource
				pre
					code.
						magicallyLoadAndDecode(binary, function(decodedBuffer) {
							var bufferSource = ac.createBufferSource();
						    bufferSource.buffer = decodedBuffer;
						    bufferSource.connect(ac);
						    bufferSource.start();
						});

			section
				h1 BufferSource
				img(src='data/img/placeholder.png', data-replace='buffer-source')


			// But buffer sources can do more than just plain playback. With...
			section
				pre
					code.
						bufferSource.playbackRate
				

			section
				h1 BufferSource
				h2 can do pitch bending!
				pre
					code.
						var now = ac.currentTime;
						var y = getMouseY();
						bufferSource.playbackRate.setValueAtTime(y, now);
			
			section
				h1 BufferSource
				h2 Pitch bending!
				img(src='data/img/placeholder.png', data-replace='buffer-source-bending')

			section
				h1 StereoPanner
				h2 Place sounds in 2D space
				// music players-adjusting balance, or music mixers

			section
				h1 StereoPanner
				pre
					code.
						var osc = ac.createOscillator();
						var stereoPanner = ac.createStereoPanner();
						osc.connect(stereoPanner);
						// left
						stereoPanner.pan.setValueAtTime(-1, now);
						// or right
						stereoPanner.pan.setValueAtTime(1, now);

			section
				h1 ((((( O_O )))))
				img(src='data/img/placeholder.png', data-replace='stereo-panner')

			section
				h1 Panner
				h2 Place sounds in 3D space
				// VR, simulations, games

			section
				h1 Understanding panning
				h2 there is a listener (us)
				pre
					code.
						ac.listener
				h2 and one or more positioned sources of sound
				pre
					code.
						var panned = ac.createPanner();
						osc.connect(panned);


			section
				// If the listener is close to a sound, it will be louder, etc.
				// Each time you update your game enemies, or when your character walks around,
				// you need to update the positions for the sounds to come from the right place
				h2 update positions for accurate placement
				pre
					code.
						ac.listener.setPosition(100, 0, 0);
						panned.setPosition(0, 0, 0);

			section
				h1 Panner
				h2 3D flock
				img(src='data/img/placeholder.png', data-replace='panner')

			//section
			//	h1 Convolver

			section
				h1 BiquadFilter
				h2 Let certain frequencies pass

			section
				h1 BiquadFilter
				pre
					code.
						var filter = ac.createBiquadFilter();
						filter.type = 'lowpass';
						filter.connect(ac.destination);
						bufferSource.connect(filter);
						bufferSource.start();
				img(src='data/img/placeholder.png', data-replace='biquadfilter')

			//section
			//	h1 MediaStreamAudioSource

			section
				h1 It's a party!

			section
				h2 ... but where are the visuals?

			section
				h1 Analyser
				h2 real-time frequency and time-domain information

			section
				h1 Analyser
				pre
					code.
						var analyser = ac.createAnalyser();
						bufferSource.connect(analyser);
						analyser.connect(ac.destination);
						var results = new Uint8Array(analyser.frequencyBinCount);
						analyser.getByteFrequencyData(results);

			section
				h1 Analyser
				img(src='data/img/placeholder.png', data-replace='analyser')

			section
				h1 Getting creative

			section
				h1 Real time input
				h2 + processing
				img(src='data/img/placeholder.png', data-replace='realtime')

			section
				h1 Wrap up

			section
				h1 Web Audio: minimal and powerful
				h2 many built-in modular nodes,
				h2 one graph, simple connect rules
				h2 sound generation, processing and analysis

			section
				h1 Web Audio
				h2 great for games, VR and interactive applications

			section
				h2 it's also
				h1 FUN!

			section
				h2 Now you know the basics,
				h1 go explore!

			section
				h2 Play with the built-in features and
				h1 make it your own

			// sonic arts and weird noises
			section
				h1 Also,
				h2 come to the Web Audio meet-ups!
				p (right now: London and Berlin)

			section
				h1 Thanks!
				h2 @supersole


